using UnityEngine;
using UnityEngine.Serialization;

/// <summary>
/// –ë–µ–≥—É—â–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ,
/// –±–µ–∂–∏—Ç –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, –ø—Ä—ã–≥–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.
/// </summary>
public class RunningEnemy : Enemy
{
    [Header("AI Parameters")] [SerializeField]
    private Transform _player;

    // [SerializeField] private float _activationRadius = 5f;
    [SerializeField] private float _destroyDistance = 15f;
    [SerializeField] private float _jumpDistance = 1.2f;
    [SerializeField] private float _spawnCooldown;
    [SerializeField] private float _cliffDetectionOffset;

    public float GetSpawnCooldown() => _spawnCooldown;

    private EnemyAnimation _enemyAnimation;

    private Vector3 _spawnPoint;

    private bool _isActive = false;
    private float _direction = -1f;
    private float _cooldownTimer;

    protected override void Awake()
    {
        base.Awake();
        _enemyAnimation = GetComponent<EnemyAnimation>();
        _spawnPoint = transform.position;


        if (_player == null)
            Debug.LogWarning("RunningEnemy: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
    }

    private void Update()
    {
        if (_player == null) return;

        if (!_isActive)
        {
            TryActivate();
            return;
        }

        HandleAI();
        _enemyAnimation.SetGrounded(IsGrounded() || IsGroundedOnWall());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        if (Mathf.Abs(transform.position.x - _player.position.x) > _destroyDistance)
        {
            Deactivate();
        }
    }

    /// <summary>
    /// AI-–ø–æ–≤–µ–¥–µ–Ω–∏–µ: –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –ø—Ä—ã–∂–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    /// </summary>
    private void HandleAI()
    {
        bool grounded = IsGrounded() || IsGroundedOnWall();

        if ((IsObstacleAhead() || IsCliffAhead())  && (IsGrounded() || IsGroundedOnWall()))
        {
            print("RUNNER TRYNA JUMP");
            Jump();
            _enemyAnimation.PlayJump();
        }

        if (grounded)
        {
            Move(_direction);
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤–ø–µ—Ä–µ–¥–∏
    /// </summary>
    private bool IsObstacleAhead()
    {
        CapsuleCollider2D collider = GetCapsuleCollider;
        Vector2 center = collider.bounds.center;
        center.x += _direction * collider.bounds.extents.x * 0.9f;

        Vector2 size = collider.bounds.size;
        size.y *= 0.3f;
        size.x *= 0.9f;

        float distance = _jumpDistance;

        RaycastHit2D hit = Physics2D.BoxCast(center, size, 0f, Vector2.right * _direction, distance, wallLayer);

        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ, –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–≥—Ä—É)
        Color rayColor = hit.collider != null ? Color.red : Color.green;
        Debug.DrawRay(center, Vector2.right * (_direction * distance), rayColor);
        /*
        |---------------|------------------------------------------------|
        | üî¥–ª—É—á         |–ï—Å—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ (–ø—Ä—ã–≥–∞—Ç—å –±—É–¥–µ–º)               |
        |---------------|------------------------------------------------|
        | üü¢–ª—É—á         |–í—Å—ë —á–∏—Å—Ç–æ, –º–æ–∂–Ω–æ –±–µ–∂–∞—Ç—å                         |
        |---------------|------------------------------------------------|
        |üü°–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫|–†–∞–∑–º–µ—Ä BoxCast ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–π —Ö–∏—Ç–±–æ–∫—Å –≤—Ä–∞–≥–∞|
        |---------------|------------------------------------------------|
        */


        // –¢–∞–∫–∂–µ –æ—Ç—Ä–∏—Å—É–µ–º —Ä–∞–∑–º–µ—Ä box'a (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        Vector3 center3D = new Vector3(center.x, center.y, 0f);
        Vector3 halfSize = new Vector3(size.x, size.y, 0f) * 0.5f;

        Debug.DrawLine(center3D - halfSize, center3D + halfSize, Color.yellow);

        if (hit.collider != null)
            Debug.Log($"[RunningEnemy] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ: {hit.collider.gameObject.name}");

        return hit.collider != null;
    }


    private bool IsCliffAhead()
    {
        Vector2 origin = _body.position + Vector2.right * _direction * _cliffDetectionOffset; // –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä–µ–¥–∏ –≤—Ä–∞–≥–∞
        float rayLength = 6.0f;

        RaycastHit2D hitGround = Physics2D.Raycast(origin, Vector2.down, rayLength, groundLayer);
        RaycastHit2D hitWall = Physics2D.Raycast(origin, Vector2.down, rayLength, wallLayer);

        Debug.DrawRay(origin, Vector2.down * rayLength, hitGround.collider ? Color.green : Color.magenta);

        return (hitGround.collider == null) && (hitWall.collider == null); // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–µ–º–ª—é ‚Äî —ç—Ç–æ –æ–±—Ä—ã–≤
    }


    /// <summary>
    /// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ —Å–æ–±—ã—Ç–∏—é ObjectPool –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
    /// </summary>
    public override void Activate()
    {
        transform.position = _spawnPoint;
        _isActive = true;
        _direction = Mathf.Sign(_player.position.x - transform.position.x);
        _cooldownTimer = 0f;
        gameObject.SetActive(true);
    }

    /// <summary>
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    /// </summary>
    public void TryActivate()
    {
        if (Vector2.Distance(transform.position, _player.position) <= _activationRadius)
        {
            _isActive = true;
            _direction = Mathf.Sign(_player.position.x - transform.position.x);
        }
    }

    /// <summary>
    /// –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–∞–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    /// </summary>
    public override void Deactivate()
    {
        _isActive = false;
        transform.position = _spawnPoint;
        gameObject.SetActive(false);
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (!_isActive) return;

        if (other.CompareTag("Player"))
        {
            Debug.Log("üí• –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω –æ—Ç RunningEnemy");
            // TODO: –í—ã–∑–æ–≤ GetDamage() —É –∏–≥—Ä–æ–∫–∞
        }
    }
}